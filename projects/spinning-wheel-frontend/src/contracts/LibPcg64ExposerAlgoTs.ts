/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"LibPcg64ExposerAlgoTs","structs":{},"methods":[{"name":"bounded_rand_uint64","args":[{"type":"byte[16]","name":"seed"},{"type":"uint64","name":"lower_bound"},{"type":"uint64","name":"upper_bound"},{"type":"uint16","name":"length"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":["UpdateApplication"]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[60],"errorMessage":"OnCompletion is not NoOp"},{"pc":[107],"errorMessage":"can only call when creating"},{"pc":[63,112],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMSAwIDYzNjQxMzYyMjM4NDY3OTMwMDUgMTQ0MjY5NTA0MDg4ODk2MzQwNyAxNDQyNjk1MDQwODg4OTYzNDA5IDQyOTQ5NjcyOTUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wY2dfZ2VuZXJhdG9yL2NvbnRyYWN0LmFsZ28udHM6MTIKICAgIC8vIGV4cG9ydCBjbGFzcyBMaWJQY2c2NEV4cG9zZXJBbGdvVHMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdANgogICAgcHVzaGJ5dGVzIDB4YmE1NjgyY2UgLy8gbWV0aG9kICJib3VuZGVkX3JhbmRfdWludDY0KGJ5dGVbMTZdLHVpbnQ2NCx1aW50NjQsdWludDE2KXVpbnQ2NFtdIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9ib3VuZGVkX3JhbmRfdWludDY0X3JvdXRlQDMKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wY2dfZ2VuZXJhdG9yL2NvbnRyYWN0LmFsZ28udHM6MTIKICAgIC8vIGV4cG9ydCBjbGFzcyBMaWJQY2c2NEV4cG9zZXJBbGdvVHMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzEgLy8gMAogICAgcmV0dXJuCgptYWluX2JvdW5kZWRfcmFuZF91aW50NjRfcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wY2dfZ2VuZXJhdG9yL2NvbnRyYWN0LmFsZ28udHM6MTMtMTgKICAgIC8vIHB1YmxpYyBib3VuZGVkX3JhbmRfdWludDY0KAogICAgLy8gICBzZWVkOiBTdGF0aWNBcnJheTxCeXRlLCAxNj4sCiAgICAvLyAgIGxvd2VyX2JvdW5kOiBVaW50TjY0LAogICAgLy8gICB1cHBlcl9ib3VuZDogVWludE42NCwKICAgIC8vICAgbGVuZ3RoOiBVaW50TjE2LAogICAgLy8gKTogRHluYW1pY0FycmF5PFVpbnRONjQ+IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3BjZ19nZW5lcmF0b3IvY29udHJhY3QuYWxnby50czoxMgogICAgLy8gZXhwb3J0IGNsYXNzIExpYlBjZzY0RXhwb3NlckFsZ29UcyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wY2dfZ2VuZXJhdG9yL2NvbnRyYWN0LmFsZ28udHM6MTMtMTgKICAgIC8vIHB1YmxpYyBib3VuZGVkX3JhbmRfdWludDY0KAogICAgLy8gICBzZWVkOiBTdGF0aWNBcnJheTxCeXRlLCAxNj4sCiAgICAvLyAgIGxvd2VyX2JvdW5kOiBVaW50TjY0LAogICAgLy8gICB1cHBlcl9ib3VuZDogVWludE42NCwKICAgIC8vICAgbGVuZ3RoOiBVaW50TjE2LAogICAgLy8gKTogRHluYW1pY0FycmF5PFVpbnRONjQ+IHsKICAgIGNhbGxzdWIgYm91bmRlZF9yYW5kX3VpbnQ2NAogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0A2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BjZ19nZW5lcmF0b3IvY29udHJhY3QuYWxnby50czoxMgogICAgLy8gZXhwb3J0IGNsYXNzIExpYlBjZzY0RXhwb3NlckFsZ29UcyBleHRlbmRzIENvbnRyYWN0IHsKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpbnRjXzEgLy8gMAogICAgdHhuIE9uQ29tcGxldGlvbgogICAgbWF0Y2ggbWFpbl91cGRhdGVANyBtYWluX19fYWxnb3RzX18uZGVmYXVsdENyZWF0ZUA4CiAgICBiIG1haW5fYWZ0ZXJfaWZfZWxzZUAxMQoKbWFpbl9fX2FsZ290c19fLmRlZmF1bHRDcmVhdGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wY2dfZ2VuZXJhdG9yL2NvbnRyYWN0LmFsZ28udHM6MTIKICAgIC8vIGV4cG9ydCBjbGFzcyBMaWJQY2c2NEV4cG9zZXJBbGdvVHMgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl91cGRhdGVANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wY2dfZ2VuZXJhdG9yL2NvbnRyYWN0LmFsZ28udHM6MjcKICAgIC8vIEBiYXJlbWV0aG9kKHsgYWxsb3dBY3Rpb25zOiBbJ1VwZGF0ZUFwcGxpY2F0aW9uJ10gfSkKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiB1cGRhdGUKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCgovLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6Ol9fcGNnMzJPdXRwdXQoc3RhdGU6IHVpbnQ2NCkgLT4gdWludDY0OgpfX3BjZzMyT3V0cHV0OgogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjMwCiAgICAvLyBleHBvcnQgZnVuY3Rpb24gX19wY2czMk91dHB1dChzdGF0ZTogUENHMzJTVEFURSk6IHVpbnQ2NCB7CiAgICBwcm90byAxIDEKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czozMQogICAgLy8gY29uc3QgeG9yc2hpZnRlZCA9IF9fbWFza1RvVWludDMyKG9wLnNocihvcC5zaHIoc3RhdGUsIDE4KSBeIHN0YXRlLCAyNykpCiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgMTggLy8gMTgKICAgIHNocgogICAgZnJhbWVfZGlnIC0xCiAgICBeCiAgICBwdXNoaW50IDI3IC8vIDI3CiAgICBzaHIKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoyMAogICAgLy8gcmV0dXJuIHZhbHVlICYgKG9wLnNobCgxLCAzMikgLSAxKQogICAgaW50YyA1IC8vIDQyOTQ5NjcyOTUKICAgICYKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czozMgogICAgLy8gY29uc3Qgcm90ID0gb3Auc2hyKHN0YXRlLCA1OSkKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCA1OSAvLyA1OQogICAgc2hyCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MzMKICAgIC8vIHJldHVybiBvcC5zaHIoeG9yc2hpZnRlZCwgcm90KSB8IF9fbWFza1RvVWludDMyKG9wLnNobCh4b3JzaGlmdGVkLCBfX3VpbnQ2NFR3b3Mocm90KSAmIDMxKSkKICAgIGR1cDIKICAgIHNocgogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjE1CiAgICAvLyBjb25zdCBbLCBhZGRMb3ddID0gb3AuYWRkdyh+dmFsdWUsIDEpCiAgICBzd2FwCiAgICB+CiAgICBpbnRjXzAgLy8gMQogICAgYWRkdwogICAgYnVyeSAxCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MzMKICAgIC8vIHJldHVybiBvcC5zaHIoeG9yc2hpZnRlZCwgcm90KSB8IF9fbWFza1RvVWludDMyKG9wLnNobCh4b3JzaGlmdGVkLCBfX3VpbnQ2NFR3b3Mocm90KSAmIDMxKSkKICAgIHB1c2hpbnQgMzEgLy8gMzEKICAgICYKICAgIHVuY292ZXIgMgogICAgc3dhcAogICAgc2hsCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MjAKICAgIC8vIHJldHVybiB2YWx1ZSAmIChvcC5zaGwoMSwgMzIpIC0gMSkKICAgIGludGMgNSAvLyA0Mjk0OTY3Mjk1CiAgICAmCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MzMKICAgIC8vIHJldHVybiBvcC5zaHIoeG9yc2hpZnRlZCwgcm90KSB8IF9fbWFza1RvVWludDMyKG9wLnNobCh4b3JzaGlmdGVkLCBfX3VpbnQ2NFR3b3Mocm90KSAmIDMxKSkKICAgIHwKICAgIHJldHN1YgoKCi8vIGxpYl9wY2cvcGNnNjQuYWxnby50czo6X19wY2c2NFVuYm91bmRlZFJhbmRvbShzdGF0ZS4wOiB1aW50NjQsIHN0YXRlLjE6IHVpbnQ2NCkgLT4gdWludDY0LCB1aW50NjQsIHVpbnQ2NDoKX19wY2c2NFVuYm91bmRlZFJhbmRvbToKICAgIC8vIGxpYl9wY2cvcGNnNjQuYWxnby50czo4CiAgICAvLyBleHBvcnQgZnVuY3Rpb24gX19wY2c2NFVuYm91bmRlZFJhbmRvbShzdGF0ZTogUENHNjRTVEFURSk6IFtQQ0c2NFNUQVRFLCB1aW50NjRdIHsKICAgIHByb3RvIDIgMwogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjI0CiAgICAvLyBjb25zdCBbLCBtdWxMb3ddID0gb3AubXVsdyhzdGF0ZSwgcGNnTXVsdGlwbGllcikKICAgIGZyYW1lX2RpZyAtMgogICAgLy8gbGliX3BjZy9jb25zdHMuYWxnby50czozCiAgICAvLyBleHBvcnQgY29uc3QgcGNnTXVsdGlwbGllciA9IFVpbnQ2NCg2MzY0MTM2MjIzODQ2NzkzMDA1bikKICAgIGludGNfMiAvLyA2MzY0MTM2MjIzODQ2NzkzMDA1CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MjQKICAgIC8vIGNvbnN0IFssIG11bExvd10gPSBvcC5tdWx3KHN0YXRlLCBwY2dNdWx0aXBsaWVyKQogICAgbXVsdwogICAgYnVyeSAxCiAgICAvLyBsaWJfcGNnL2NvbnN0cy5hbGdvLnRzOjUKICAgIC8vIGV4cG9ydCBjb25zdCBwY2dGaXJzdEluY3JlbWVudCA9IFVpbnQ2NCgxNDQyNjk1MDQwODg4OTYzNDA3bikKICAgIGludGNfMyAvLyAxNDQyNjk1MDQwODg4OTYzNDA3CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MjUKICAgIC8vIGNvbnN0IFssIGFkZExvd10gPSBvcC5hZGR3KG11bExvdywgaW5jcikKICAgIGFkZHcKICAgIGR1cAogICAgdW5jb3ZlciAyCiAgICBwb3AKICAgIC8vIGxpYl9wY2cvcGNnNjQuYWxnby50czoxMAogICAgLy8gY29uc3QgbmV3U3RhdGUyID0gX19wY2czMlN0ZXAoc3RhdGVbMV0sIG5ld1N0YXRlMSA9PT0gMCA/IG9wLnNobChwY2dTZWNvbmRJbmNyZW1lbnQsIDEpIDogcGNnU2Vjb25kSW5jcmVtZW50KQogICAgYm56IF9fcGNnNjRVbmJvdW5kZWRSYW5kb21fdGVybmFyeV9mYWxzZUAyCiAgICBwdXNoaW50IDI4ODUzOTAwODE3Nzc5MjY4MTggLy8gMjg4NTM5MDA4MTc3NzkyNjgxOAoKX19wY2c2NFVuYm91bmRlZFJhbmRvbV90ZXJuYXJ5X21lcmdlQDM6CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MjQKICAgIC8vIGNvbnN0IFssIG11bExvd10gPSBvcC5tdWx3KHN0YXRlLCBwY2dNdWx0aXBsaWVyKQogICAgZnJhbWVfZGlnIC0xCiAgICAvLyBsaWJfcGNnL2NvbnN0cy5hbGdvLnRzOjMKICAgIC8vIGV4cG9ydCBjb25zdCBwY2dNdWx0aXBsaWVyID0gVWludDY0KDYzNjQxMzYyMjM4NDY3OTMwMDVuKQogICAgaW50Y18yIC8vIDYzNjQxMzYyMjM4NDY3OTMwMDUKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoyNAogICAgLy8gY29uc3QgWywgbXVsTG93XSA9IG9wLm11bHcoc3RhdGUsIHBjZ011bHRpcGxpZXIpCiAgICBtdWx3CiAgICBidXJ5IDEKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoyNQogICAgLy8gY29uc3QgWywgYWRkTG93XSA9IG9wLmFkZHcobXVsTG93LCBpbmNyKQogICAgYWRkdwogICAgYnVyeSAxCiAgICAvLyBsaWJfcGNnL3BjZzY0LmFsZ28udHM6MTIKICAgIC8vIHJldHVybiBbW25ld1N0YXRlMSwgbmV3U3RhdGUyXSwgb3Auc2hsKF9fcGNnMzJPdXRwdXQoc3RhdGVbMF0pLCAzMikgfCBfX3BjZzMyT3V0cHV0KHN0YXRlWzFdKV0KICAgIGZyYW1lX2RpZyAtMgogICAgY2FsbHN1YiBfX3BjZzMyT3V0cHV0CiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICBzaGwKICAgIGZyYW1lX2RpZyAtMQogICAgY2FsbHN1YiBfX3BjZzMyT3V0cHV0CiAgICB8CiAgICBmcmFtZV9kaWcgMAogICAgY292ZXIgMgogICAgdW5jb3ZlciAzCiAgICByZXRzdWIKCl9fcGNnNjRVbmJvdW5kZWRSYW5kb21fdGVybmFyeV9mYWxzZUAyOgogICAgLy8gbGliX3BjZy9jb25zdHMuYWxnby50czo3CiAgICAvLyBleHBvcnQgY29uc3QgcGNnU2Vjb25kSW5jcmVtZW50ID0gVWludDY0KDE0NDI2OTUwNDA4ODg5NjM0MDluKQogICAgaW50YyA0IC8vIDE0NDI2OTUwNDA4ODg5NjM0MDkKICAgIGIgX19wY2c2NFVuYm91bmRlZFJhbmRvbV90ZXJuYXJ5X21lcmdlQDMKCgovLyBzbWFydF9jb250cmFjdHMvcGNnX2dlbmVyYXRvci9jb250cmFjdC5hbGdvLnRzOjpMaWJQY2c2NEV4cG9zZXJBbGdvVHMuYm91bmRlZF9yYW5kX3VpbnQ2NChzZWVkOiBieXRlcywgbG93ZXJfYm91bmQ6IGJ5dGVzLCB1cHBlcl9ib3VuZDogYnl0ZXMsIGxlbmd0aDogYnl0ZXMpIC0+IGJ5dGVzOgpib3VuZGVkX3JhbmRfdWludDY0OgogICAgLy8gc21hcnRfY29udHJhY3RzL3BjZ19nZW5lcmF0b3IvY29udHJhY3QuYWxnby50czoxMy0xOAogICAgLy8gcHVibGljIGJvdW5kZWRfcmFuZF91aW50NjQoCiAgICAvLyAgIHNlZWQ6IFN0YXRpY0FycmF5PEJ5dGUsIDE2PiwKICAgIC8vICAgbG93ZXJfYm91bmQ6IFVpbnRONjQsCiAgICAvLyAgIHVwcGVyX2JvdW5kOiBVaW50TjY0LAogICAgLy8gICBsZW5ndGg6IFVpbnROMTYsCiAgICAvLyApOiBEeW5hbWljQXJyYXk8VWludE42ND4gewogICAgcHJvdG8gNCAxCiAgICBwdXNoYnl0ZXMgIiIKICAgIGR1cG4gNwogICAgLy8gbGliX3BjZy9wY2c2NC5hbGdvLnRzOjE5CiAgICAvLyBfX3BjZzMySW5pdChvcC5leHRyYWN0VWludDY0KHNlZWQsIDApLCBwY2dGaXJzdEluY3JlbWVudCksCiAgICBmcmFtZV9kaWcgLTQKICAgIGludGNfMSAvLyAwCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjk5CiAgICAvLyBjb25zdCBzdGF0ZSA9IF9fcGNnMzJTdGVwKDAsIGluY3IpCiAgICBpbnRjXzEgLy8gMAogICAgLy8gbGliX3BjZy9jb25zdHMuYWxnby50czozCiAgICAvLyBleHBvcnQgY29uc3QgcGNnTXVsdGlwbGllciA9IFVpbnQ2NCg2MzY0MTM2MjIzODQ2NzkzMDA1bikKICAgIGludGNfMiAvLyA2MzY0MTM2MjIzODQ2NzkzMDA1CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MjQKICAgIC8vIGNvbnN0IFssIG11bExvd10gPSBvcC5tdWx3KHN0YXRlLCBwY2dNdWx0aXBsaWVyKQogICAgbXVsdwogICAgYnVyeSAxCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MjUKICAgIC8vIGNvbnN0IFssIGFkZExvd10gPSBvcC5hZGR3KG11bExvdywgaW5jcikKICAgIGR1cAogICAgLy8gbGliX3BjZy9jb25zdHMuYWxnby50czo1CiAgICAvLyBleHBvcnQgY29uc3QgcGNnRmlyc3RJbmNyZW1lbnQgPSBVaW50NjQoMTQ0MjY5NTA0MDg4ODk2MzQwN24pCiAgICBpbnRjXzMgLy8gMTQ0MjY5NTA0MDg4ODk2MzQwNwogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjI1CiAgICAvLyBjb25zdCBbLCBhZGRMb3ddID0gb3AuYWRkdyhtdWxMb3csIGluY3IpCiAgICBhZGR3CiAgICBidXJ5IDEKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoxMDAKICAgIC8vIGNvbnN0IFssIGFkZExvd10gPSBvcC5hZGR3KHN0YXRlLCBpbml0aWFsU3RhdGUpCiAgICB1bmNvdmVyIDIKICAgIGFkZHcKICAgIGJ1cnkgMQogICAgLy8gbGliX3BjZy9jb25zdHMuYWxnby50czozCiAgICAvLyBleHBvcnQgY29uc3QgcGNnTXVsdGlwbGllciA9IFVpbnQ2NCg2MzY0MTM2MjIzODQ2NzkzMDA1bikKICAgIGludGNfMiAvLyA2MzY0MTM2MjIzODQ2NzkzMDA1CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MjQKICAgIC8vIGNvbnN0IFssIG11bExvd10gPSBvcC5tdWx3KHN0YXRlLCBwY2dNdWx0aXBsaWVyKQogICAgbXVsdwogICAgYnVyeSAxCiAgICAvLyBsaWJfcGNnL2NvbnN0cy5hbGdvLnRzOjUKICAgIC8vIGV4cG9ydCBjb25zdCBwY2dGaXJzdEluY3JlbWVudCA9IFVpbnQ2NCgxNDQyNjk1MDQwODg4OTYzNDA3bikKICAgIGludGNfMyAvLyAxNDQyNjk1MDQwODg4OTYzNDA3CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MjUKICAgIC8vIGNvbnN0IFssIGFkZExvd10gPSBvcC5hZGR3KG11bExvdywgaW5jcikKICAgIGFkZHcKICAgIGNvdmVyIDIKICAgIHBvcAogICAgLy8gbGliX3BjZy9wY2c2NC5hbGdvLnRzOjIwCiAgICAvLyBfX3BjZzMySW5pdChvcC5leHRyYWN0VWludDY0KHNlZWQsIDgpLCBwY2dTZWNvbmRJbmNyZW1lbnQpLAogICAgZnJhbWVfZGlnIC00CiAgICBwdXNoaW50IDggLy8gOAogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoyNQogICAgLy8gY29uc3QgWywgYWRkTG93XSA9IG9wLmFkZHcobXVsTG93LCBpbmNyKQogICAgc3dhcAogICAgLy8gbGliX3BjZy9jb25zdHMuYWxnby50czo3CiAgICAvLyBleHBvcnQgY29uc3QgcGNnU2Vjb25kSW5jcmVtZW50ID0gVWludDY0KDE0NDI2OTUwNDA4ODg5NjM0MDluKQogICAgaW50YyA0IC8vIDE0NDI2OTUwNDA4ODg5NjM0MDkKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoyNQogICAgLy8gY29uc3QgWywgYWRkTG93XSA9IG9wLmFkZHcobXVsTG93LCBpbmNyKQogICAgYWRkdwogICAgYnVyeSAxCiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MTAwCiAgICAvLyBjb25zdCBbLCBhZGRMb3ddID0gb3AuYWRkdyhzdGF0ZSwgaW5pdGlhbFN0YXRlKQogICAgYWRkdwogICAgYnVyeSAxCiAgICAvLyBsaWJfcGNnL2NvbnN0cy5hbGdvLnRzOjMKICAgIC8vIGV4cG9ydCBjb25zdCBwY2dNdWx0aXBsaWVyID0gVWludDY0KDYzNjQxMzYyMjM4NDY3OTMwMDVuKQogICAgaW50Y18yIC8vIDYzNjQxMzYyMjM4NDY3OTMwMDUKICAgIC8vIGxpYl9wY2cvcGNnMzIuYWxnby50czoyNAogICAgLy8gY29uc3QgWywgbXVsTG93XSA9IG9wLm11bHcoc3RhdGUsIHBjZ011bHRpcGxpZXIpCiAgICBtdWx3CiAgICBidXJ5IDEKICAgIC8vIGxpYl9wY2cvY29uc3RzLmFsZ28udHM6NwogICAgLy8gZXhwb3J0IGNvbnN0IHBjZ1NlY29uZEluY3JlbWVudCA9IFVpbnQ2NCgxNDQyNjk1MDQwODg4OTYzNDA5bikKICAgIGludGMgNCAvLyAxNDQyNjk1MDQwODg4OTYzNDA5CiAgICAvLyBsaWJfcGNnL3BjZzMyLmFsZ28udHM6MjUKICAgIC8vIGNvbnN0IFssIGFkZExvd10gPSBvcC5hZGR3KG11bExvdywgaW5jcikKICAgIGFkZHcKICAgIGJ1cnkgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3BjZ19nZW5lcmF0b3IvY29udHJhY3QuYWxnby50czoyMgogICAgLy8gY29uc3QgW25ld1N0YXRlLCBzZXF1ZW5jZV0gPSBwY2c2NFJhbmRvbShzdGF0ZSwgbG93ZXJfYm91bmQubmF0aXZlLCB1cHBlcl9ib3VuZC5uYXRpdmUsIGxlbmd0aC5uYXRpdmUpCiAgICBmcmFtZV9kaWcgLTMKICAgIGJ0b2kKICAgIGR1cAogICAgZnJhbWVfZGlnIC0yCiAgICBidG9pCiAgICBzd2FwCiAgICBmcmFtZV9kaWcgLTEKICAgIGJ0b2kKICAgIHN3YXAKICAgIC8vIGxpYl9wY2cvcGNnNjQuYWxnby50czozMAogICAgLy8gY29uc3QgcmVzdWx0ID0gbmV3IER5bmFtaWNBcnJheTxVaW50TjY0PigpCiAgICBwdXNoYnl0ZXMgMHgwMDAwCiAgICBzd2FwCiAgICAvLyBsaWJfcGNnL3BjZzY0LmFsZ28udHM6MzQKICAgIC8vIGlmIChsb3dlckJvdW5kID09PSAwICYmIHVwcGVyQm91bmQgPT09IDApIHsKICAgIGJueiBib3VuZGVkX3JhbmRfdWludDY0X2Vsc2VfYm9keUA5CiAgICBmcmFtZV9kaWcgMTEKICAgIGJueiBib3VuZGVkX3JhbmRfdWludDY0X2Vsc2VfYm9keUA5CiAgICAvLyBsaWJfcGNnL3BjZzY0LmFsZ28udHM6MzUKICAgIC8vIGZvciAobGV0IGkgPSBVaW50NjQoMCk7IGkgPCBsZW5ndGg7IGkgPSBpICsgMSkgewogICAgaW50Y18xIC8vIDAKICAgIGZyYW1lX2J1cnkgMgogICAgZnJhbWVfZGlnIDkKICAgIGZyYW1lX2J1cnkgNgogICAgZnJhbWVfZGlnIDgKICAgIGZyYW1lX2J1cnkgNQoKYm91bmRlZF9yYW5kX3VpbnQ2NF93aGlsZV90b3BANjoKICAgIC8vIGxpYl9wY2cvcGNnNjQuYWxnby50czozNQogICAgLy8gZm9yIChsZXQgaSA9IFVpbnQ2NCgwKTsgaSA8IGxlbmd0aDsgaSA9IGkgKyAxKSB7CiAgICBmcmFtZV9kaWcgMgogICAgZnJhbWVfZGlnIDEyCiAgICA8CiAgICBieiBib3VuZGVkX3JhbmRfdWludDY0X2FmdGVyX2lmX2Vsc2VAMjAKICAgIC8vIGxpYl9wY2cvcGNnNjQuYWxnby50czozNgogICAgLy8gY29uc3QgW25ld1N0YXRlLCBuXSA9IF9fcGNnNjRVbmJvdW5kZWRSYW5kb20oc3RhdGUpCiAgICBmcmFtZV9kaWcgNQogICAgZnJhbWVfZGlnIDYKICAgIGNhbGxzdWIgX19wY2c2NFVuYm91bmRlZFJhbmRvbQogICAgLy8gbGliX3BjZy9wY2c2NC5hbGdvLnRzOjM5CiAgICAvLyByZXN1bHQucHVzaChuZXcgVWludE42NChuKSkKICAgIGZyYW1lX2RpZyAxMwogICAgZXh0cmFjdCAyIDAKICAgIHN3YXAKICAgIGl0b2IKICAgIGNvbmNhdAogICAgZHVwCiAgICBsZW4KICAgIHB1c2hpbnQgOCAvLyA4CiAgICAvCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgc3dhcAogICAgY29uY2F0CiAgICBmcmFtZV9idXJ5IDEzCiAgICAvLyBsaWJfcGNnL3BjZzY0LmFsZ28udHM6MzUKICAgIC8vIGZvciAobGV0IGkgPSBVaW50NjQoMCk7IGkgPCBsZW5ndGg7IGkgPSBpICsgMSkgewogICAgZnJhbWVfZGlnIDIKICAgIGludGNfMCAvLyAxCiAgICArCiAgICBmcmFtZV9idXJ5IDIKICAgIGZyYW1lX2J1cnkgNgogICAgZnJhbWVfYnVyeSA1CiAgICBiIGJvdW5kZWRfcmFuZF91aW50NjRfd2hpbGVfdG9wQDYKCmJvdW5kZWRfcmFuZF91aW50NjRfYWZ0ZXJfaWZfZWxzZUAyMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9wY2dfZ2VuZXJhdG9yL2NvbnRyYWN0LmFsZ28udHM6MjQKICAgIC8vIHJldHVybiBzZXF1ZW5jZQogICAgZnJhbWVfZGlnIDEzCiAgICBmcmFtZV9idXJ5IDAKICAgIHJldHN1YgoKYm91bmRlZF9yYW5kX3VpbnQ2NF9lbHNlX2JvZHlAOToKICAgIC8vIGxpYl9wY2cvcGNnNjQuYWxnby50czo0MgogICAgLy8gaWYgKHVwcGVyQm91bmQgIT09IDApIHsKICAgIGZyYW1lX2RpZyAxMQogICAgYnogYm91bmRlZF9yYW5kX3VpbnQ2NF9lbHNlX2JvZHlAMTEKICAgIC8vIGxpYl9wY2cvcGNnNjQuYWxnby50czo0MwogICAgLy8gYXNzZXJ0KHVwcGVyQm91bmQgPiAxKQogICAgZnJhbWVfZGlnIDExCiAgICBkdXAKICAgIGludGNfMCAvLyAxCiAgICA+CiAgICBhc3NlcnQKICAgIC8vIGxpYl9wY2cvcGNnNjQuYWxnby50czo0NAogICAgLy8gYXNzZXJ0KGxvd2VyQm91bmQgPCB1cHBlckJvdW5kIC0gMSkKICAgIGR1cAogICAgaW50Y18wIC8vIDEKICAgIC0KICAgIGZyYW1lX2RpZyAxMAogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIDwKICAgIGFzc2VydAogICAgLy8gbGliX3BjZy9wY2c2NC5hbGdvLnRzOjQ2CiAgICAvLyBhYnNvbHV0ZUJvdW5kID0gdXBwZXJCb3VuZCAtIGxvd2VyQm91bmQKICAgIC0KICAgIGZyYW1lX2J1cnkgMAoKYm91bmRlZF9yYW5kX3VpbnQ2NF9hZnRlcl9pZl9lbHNlQDEyOgogICAgLy8gbGliX3BjZy9wY2czMi5hbGdvLnRzOjE1CiAgICAvLyBjb25zdCBbLCBhZGRMb3ddID0gb3AuYWRkdyh+dmFsdWUsIDEpCiAgICBmcmFtZV9kaWcgMAogICAgZHVwCiAgICB+CiAgICBpbnRjXzAgLy8gMQogICAgYWRkdwogICAgYnVyeSAxCiAgICAvLyBsaWJfcGNnL3BjZzY0LmFsZ28udHM6NTMKICAgIC8vIGNvbnN0IHRocmVzaG9sZDogdWludDY0ID0gX191aW50NjRUd29zKGFic29sdXRlQm91bmQpICUgYWJzb2x1dGVCb3VuZAogICAgc3dhcAogICAgJQogICAgZnJhbWVfYnVyeSA3CiAgICAvLyBsaWJfcGNnL3BjZzY0LmFsZ28udHM6NTUKICAgIC8vIGZvciAobGV0IGkgPSBVaW50NjQoMCk7IGkgPCBsZW5ndGg7IGkgPSBpICsgMSkgewogICAgaW50Y18xIC8vIDAKICAgIGZyYW1lX2J1cnkgMwogICAgZnJhbWVfZGlnIDkKICAgIGZyYW1lX2J1cnkgNgogICAgZnJhbWVfZGlnIDgKICAgIGZyYW1lX2J1cnkgNQoKYm91bmRlZF9yYW5kX3VpbnQ2NF93aGlsZV90b3BAMTM6CiAgICAvLyBsaWJfcGNnL3BjZzY0LmFsZ28udHM6NTUKICAgIC8vIGZvciAobGV0IGkgPSBVaW50NjQoMCk7IGkgPCBsZW5ndGg7IGkgPSBpICsgMSkgewogICAgZnJhbWVfZGlnIDMKICAgIGZyYW1lX2RpZyAxMgogICAgPAogICAgYnogYm91bmRlZF9yYW5kX3VpbnQ2NF9hZnRlcl9pZl9lbHNlQDIwCgpib3VuZGVkX3JhbmRfdWludDY0X3doaWxlX3RvcEAxNToKICAgIC8vIGxpYl9wY2cvcGNnNjQuYWxnby50czo1NwogICAgLy8gY29uc3QgW25ld1N0YXRlLCBjYW5kaWRhdGVdID0gX19wY2c2NFVuYm91bmRlZFJhbmRvbShzdGF0ZSkKICAgIGZyYW1lX2RpZyA1CiAgICBmcmFtZV9kaWcgNgogICAgY2FsbHN1YiBfX3BjZzY0VW5ib3VuZGVkUmFuZG9tCiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGZyYW1lX2J1cnkgMQogICAgY292ZXIgMgogICAgZnJhbWVfYnVyeSA0CiAgICAvLyBsaWJfcGNnL3BjZzY0LmFsZ28udHM6NTkKICAgIC8vIGlmIChjYW5kaWRhdGUgPj0gdGhyZXNob2xkKSB7CiAgICBmcmFtZV9kaWcgNwogICAgPj0KICAgIGJ6IGJvdW5kZWRfcmFuZF91aW50NjRfYWZ0ZXJfaWZfZWxzZUAxNwogICAgLy8gbGliX3BjZy9wY2c2NC5hbGdvLnRzOjYwCiAgICAvLyByZXN1bHQucHVzaChuZXcgVWludE42NCgoY2FuZGlkYXRlICUgYWJzb2x1dGVCb3VuZCkgKyBsb3dlckJvdW5kKSkKICAgIGZyYW1lX2RpZyAxMwogICAgZXh0cmFjdCAyIDAKICAgIGZyYW1lX2RpZyAxCiAgICBmcmFtZV9kaWcgMAogICAgJQogICAgZnJhbWVfZGlnIDEwCiAgICArCiAgICBpdG9iCiAgICBjb25jYXQKICAgIGR1cAogICAgbGVuCiAgICBwdXNoaW50IDggLy8gOAogICAgLwogICAgaXRvYgogICAgZXh0cmFjdCA2IDIKICAgIHN3YXAKICAgIGNvbmNhdAogICAgZnJhbWVfYnVyeSAxMwogICAgLy8gbGliX3BjZy9wY2c2NC5hbGdvLnRzOjU1CiAgICAvLyBmb3IgKGxldCBpID0gVWludDY0KDApOyBpIDwgbGVuZ3RoOyBpID0gaSArIDEpIHsKICAgIGZyYW1lX2RpZyAzCiAgICBpbnRjXzAgLy8gMQogICAgKwogICAgZnJhbWVfYnVyeSAzCiAgICBmcmFtZV9idXJ5IDYKICAgIGZyYW1lX2RpZyA0CiAgICBmcmFtZV9idXJ5IDUKICAgIGIgYm91bmRlZF9yYW5kX3VpbnQ2NF93aGlsZV90b3BAMTMKCmJvdW5kZWRfcmFuZF91aW50NjRfYWZ0ZXJfaWZfZWxzZUAxNzoKICAgIGZyYW1lX2J1cnkgNgogICAgZnJhbWVfZGlnIDQKICAgIGZyYW1lX2J1cnkgNQogICAgYiBib3VuZGVkX3JhbmRfdWludDY0X3doaWxlX3RvcEAxNQoKYm91bmRlZF9yYW5kX3VpbnQ2NF9lbHNlX2JvZHlAMTE6CiAgICAvLyBsaWJfcGNnL3BjZzY0LmFsZ28udHM6NDgKICAgIC8vIGFzc2VydChsb3dlckJvdW5kIDwgMiAqKiA2NCAtIDEpCiAgICBmcmFtZV9kaWcgMTAKICAgIGR1cAogICAgcHVzaGludCAxODQ0Njc0NDA3MzcwOTU1MTYxNSAvLyAxODQ0Njc0NDA3MzcwOTU1MTYxNQogICAgPAogICAgYXNzZXJ0CiAgICAvLyBsaWJfcGNnL3BjZzY0LmFsZ28udHM6NTAKICAgIC8vIGFic29sdXRlQm91bmQgPSBvcC5idG9pKEJ5dGVzKEJpZ1VpbnQoMiAqKiA2NCkgLSBCaWdVaW50KGxvd2VyQm91bmQpKSkKICAgIGl0b2IKICAgIHB1c2hieXRlcyAweDAxMDAwMDAwMDAwMDAwMDAwMAogICAgc3dhcAogICAgYi0KICAgIGJ0b2kKICAgIGZyYW1lX2J1cnkgMAogICAgYiBib3VuZGVkX3JhbmRfdWludDY0X2FmdGVyX2lmX2Vsc2VAMTIKCgovLyBzbWFydF9jb250cmFjdHMvcGNnX2dlbmVyYXRvci9jb250cmFjdC5hbGdvLnRzOjpMaWJQY2c2NEV4cG9zZXJBbGdvVHMudXBkYXRlKCkgLT4gdm9pZDoKdXBkYXRlOgogICAgLy8gc21hcnRfY29udHJhY3RzL3BjZ19nZW5lcmF0b3IvY29udHJhY3QuYWxnby50czoyOQogICAgLy8gYXNzZXJ0KFR4bi5zZW5kZXIgPT09IEdsb2JhbC5jcmVhdG9yQWRkcmVzcykKICAgIHR4biBTZW5kZXIKICAgIGdsb2JhbCBDcmVhdG9yQWRkcmVzcwogICAgPT0KICAgIGFzc2VydAogICAgcmV0c3ViCg==","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAGAQCt/tXk1IX9qFjPgp677+/eghTRgp677+/eghT/////DzEbQQAwgAS6VoLONhoAjgEAAiNDMRkURDEYRDYaATYaAjYaAzYaBIgAkIAEFR98dUxQsCJDgQQjMRmOAgAJAANC/88xGBREIkMxGESIAaQiQ4oBAYv/gRKRi/8bgRuRIQUai/+BO5FKkUwcIh5FAYEfGk8CTJAhBRoZiYoCA4v+JB1FASUeSU8CSEAAKIGihbz23t+9hSiL/yQdRQEeRQGL/oj/rIEgkIv/iP+kGYsATgJPA4khBEL/3YoEAYAARweL/CNbIyQdRQFJJR5FAU8CHkUBJB1FASUeTgJIi/yBCFtMIQQeRQEeRQEkHUUBIQQeRQGL/RdJi/4XTIv/F0yAAgAATEAARosLQABBI4wCiwmMBosIjAWLAosMDEEAKYsFiwaI/1SLDVcCAEwWUEkVgQgKFlcGAkxQjA2LAiIIjAKMBowFQv/Piw2MAImLC0EAfIsLSSINREkiCYsKSU8CDEQJjACLAEkcIh5FAUwYjAcjjAOLCYwGiwiMBYsDiwwMQf/EiwWLBoj+70lOA4wBTgKMBIsHD0EAK4sNVwIAiwGLABiLCggWUEkVgQgKFlcGAkxQjA2LAyIIjAOMBosEjAVC/7eMBosEjAVC/7aLCkmB////////////AQxEFoAJAQAAAAAAAAAATKEXjABC/3MxADIJEkSJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the LibPcg64ExposerAlgoTs contract
 */
export type LibPcg64ExposerAlgoTsArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]': {
      seed: Uint8Array
      lowerBound: bigint | number
      upperBound: bigint | number
      length: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]': [seed: Uint8Array, lowerBound: bigint | number, upperBound: bigint | number, length: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type LibPcg64ExposerAlgoTsReturns = {
  'bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]': bigint[]
}

/**
 * Defines the types of available calls and state of the LibPcg64ExposerAlgoTs smart contract.
 */
export type LibPcg64ExposerAlgoTsTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]' | 'bounded_rand_uint64', {
      argsObj: LibPcg64ExposerAlgoTsArgs['obj']['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]']
      argsTuple: LibPcg64ExposerAlgoTsArgs['tuple']['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]']
      returns: LibPcg64ExposerAlgoTsReturns['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type LibPcg64ExposerAlgoTsSignatures = keyof LibPcg64ExposerAlgoTsTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type LibPcg64ExposerAlgoTsNonVoidMethodSignatures = keyof LibPcg64ExposerAlgoTsTypes['methods'] extends infer T ? T extends keyof LibPcg64ExposerAlgoTsTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the LibPcg64ExposerAlgoTs smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends LibPcg64ExposerAlgoTsSignatures> = LibPcg64ExposerAlgoTsTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LibPcg64ExposerAlgoTs smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LibPcg64ExposerAlgoTsSignatures> = LibPcg64ExposerAlgoTsTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type LibPcg64ExposerAlgoTsCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type LibPcg64ExposerAlgoTsUpdateCallParams =
  | Expand<AppClientBareCallParams> & {method?: never}
/**
 * Defines arguments required for the deploy method.
 */
export type LibPcg64ExposerAlgoTsDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: LibPcg64ExposerAlgoTsCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: LibPcg64ExposerAlgoTsUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the LibPcg64ExposerAlgoTs smart contract
 */
export abstract class LibPcg64ExposerAlgoTsParamsFactory {
  /**
   * Constructs a no op call for the bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[] ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static boundedRandUint64(params: CallParams<LibPcg64ExposerAlgoTsArgs['obj']['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]'] | LibPcg64ExposerAlgoTsArgs['tuple']['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.seed, params.args.lowerBound, params.args.upperBound, params.args.length],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the LibPcg64ExposerAlgoTs smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class LibPcg64ExposerAlgoTsFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `LibPcg64ExposerAlgoTsFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new LibPcg64ExposerAlgoTsClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new LibPcg64ExposerAlgoTsClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the LibPcg64ExposerAlgoTs smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: LibPcg64ExposerAlgoTsDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new LibPcg64ExposerAlgoTsClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LibPcg64ExposerAlgoTs smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

    /**
     * Gets available deployUpdate methods
     */
    deployUpdate: {
      /**
       * Updates an existing instance of the LibPcg64ExposerAlgoTs smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a deployUpdate call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appFactory.params.bare.deployUpdate(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LibPcg64ExposerAlgoTs smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LibPcg64ExposerAlgoTs smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new LibPcg64ExposerAlgoTsClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the LibPcg64ExposerAlgoTs smart contract
 */
export class LibPcg64ExposerAlgoTsClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `LibPcg64ExposerAlgoTsClient`
   *
   * @param appClient An `AppClient` instance which has been created with the LibPcg64ExposerAlgoTs app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `LibPcg64ExposerAlgoTsClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends LibPcg64ExposerAlgoTsNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `LibPcg64ExposerAlgoTsClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<LibPcg64ExposerAlgoTsClient> {
    return new LibPcg64ExposerAlgoTsClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `LibPcg64ExposerAlgoTsClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<LibPcg64ExposerAlgoTsClient> {
    return new LibPcg64ExposerAlgoTsClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the LibPcg64ExposerAlgoTs smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.params.bare.update(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the LibPcg64ExposerAlgoTs smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the LibPcg64ExposerAlgoTs smart contract using the `bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    boundedRandUint64: (params: CallParams<LibPcg64ExposerAlgoTsArgs['obj']['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]'] | LibPcg64ExposerAlgoTsArgs['tuple']['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LibPcg64ExposerAlgoTsParamsFactory.boundedRandUint64(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the LibPcg64ExposerAlgoTs smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams>) => {
        return this.appClient.createTransaction.bare.update(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the LibPcg64ExposerAlgoTs smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the LibPcg64ExposerAlgoTs smart contract using the `bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    boundedRandUint64: (params: CallParams<LibPcg64ExposerAlgoTsArgs['obj']['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]'] | LibPcg64ExposerAlgoTsArgs['tuple']['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LibPcg64ExposerAlgoTsParamsFactory.boundedRandUint64(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available update methods
     */
    update: {
      /**
       * Updates an existing instance of the LibPcg64ExposerAlgoTs smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The update result
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & SendParams>) => {
        return this.appClient.send.bare.update(params)
      },
    },

    /**
     * Makes a clear_state call to an existing instance of the LibPcg64ExposerAlgoTs smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the LibPcg64ExposerAlgoTs smart contract using the `bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    boundedRandUint64: async (params: CallParams<LibPcg64ExposerAlgoTsArgs['obj']['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]'] | LibPcg64ExposerAlgoTsArgs['tuple']['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LibPcg64ExposerAlgoTsParamsFactory.boundedRandUint64(params))
      return {...result, return: result.return as unknown as (undefined | LibPcg64ExposerAlgoTsReturns['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new LibPcg64ExposerAlgoTsClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current LibPcg64ExposerAlgoTs app
   */
  state = {
  }

  public newGroup(): LibPcg64ExposerAlgoTsComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[] method call against the LibPcg64ExposerAlgoTs contract
       */
      boundedRandUint64(params: CallParams<LibPcg64ExposerAlgoTsArgs['obj']['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]'] | LibPcg64ExposerAlgoTsArgs['tuple']['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.boundedRandUint64(params)))
        resultMappers.push((v) => client.decodeReturnValue('bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]', v))
        return this
      },
      get update() {
        return {
          bare: (params?: AppClientBareCallParams & AppClientCompilationParams ) => {
            promiseChain = promiseChain.then(async () => composer.addAppUpdate(await client.params.update.bare(params)))
            return this
          },
        }
      },
      /**
       * Add a clear state call to the LibPcg64ExposerAlgoTs contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as LibPcg64ExposerAlgoTsComposer
  }
}
export type LibPcg64ExposerAlgoTsComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[] ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  boundedRandUint64(params?: CallParams<LibPcg64ExposerAlgoTsArgs['obj']['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]'] | LibPcg64ExposerAlgoTsArgs['tuple']['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]']>): LibPcg64ExposerAlgoTsComposer<[...TReturns, LibPcg64ExposerAlgoTsReturns['bounded_rand_uint64(byte[16],uint64,uint64,uint16)uint64[]'] | undefined]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the LibPcg64ExposerAlgoTs smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(params?: AppClientBareCallParams ): LibPcg64ExposerAlgoTsComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the LibPcg64ExposerAlgoTs smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): LibPcg64ExposerAlgoTsComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): LibPcg64ExposerAlgoTsComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<LibPcg64ExposerAlgoTsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<LibPcg64ExposerAlgoTsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<LibPcg64ExposerAlgoTsComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<LibPcg64ExposerAlgoTsComposerResults<TReturns>>
}
export type LibPcg64ExposerAlgoTsComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

